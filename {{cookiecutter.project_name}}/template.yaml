AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  {{ cookiecutter.project_name }}

  SAM Template for {{ cookiecutter.project_name }}

Metadata:
  AWS::ServerlessRepo::Application:
    Name: {{ cookiecutter.project_name }}
    Description: SAM Template for {{ cookiecutter.project_name }}
    Author: {{ cookiecutter.author }}
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/scrambledeggs/{{ cookiecutter.project_name }}
    SourceCodeUrl: https://github.com/scrambledeggs/{{ cookiecutter.project_name }}
    SemanticVersion: 0.0.1

Parameters:
  AlternateDomainName:
    Type: String
  AppEnv:
    Type: String
    Default: "test"
  AuthorizerFunctionArn:
    Type: String
  CertificateArn:
    Type: String
  CorsAllowedHeaders:
    Type: String
    Default: "Access-Control-Allow-Headers,Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers,X-Api-Key"
  CorsAllowedMethods:
    Type: String
    Default: "POST,GET,PUT,PATCH,DELETE,OPTIONS"
  CorsAllowedOrigins:
    Type: String
    Default: "*"
  DistributionId:
    Type: String
  SecurityGroups:
    Type: String
  Subnets:
    Type: String

Conditions:
  ProdEnv: !Equals [!Ref AppEnv, "production"]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    Tags:
      Usage: {{ cookiecutter.project_name }}
      Environment: !If [ProdEnv, prod, non-prod]
    PropagateTags: true
    VpcConfig:
      SecurityGroupIds: !Split [",", !Ref SecurityGroups]
      SubnetIds: !Split [",", !Ref Subnets]

    Timeout: 5
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

    Environment:
      Variables:
        APP_ENV: !Ref AppEnv
  Api:
    TracingEnabled: true
    Cors:
      AllowHeaders: !Join ["", ["'", !Ref CorsAllowedHeaders, "'"]]
      AllowMethods: !Join ["", ["'", !Ref CorsAllowedMethods, "'"]]
      AllowOrigin: !Join ["", ["'", !Ref CorsAllowedOrigins, "'"]]

Resources:
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Tags:
        Usage: tags
        Environment: !If [ProdEnv, prod, non-prod]
      StageName: !Ref AppEnv
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'WWW-Authenticate'"
              Access-Control-Allow-Origin:
                !Join ["", ["'", !Ref CorsAllowedOrigins, "'"]]
      Auth:
        DefaultAuthorizer: ApiKeyAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          ApiKeyAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !Ref AuthorizerFunctionArn
            Identity:
              Headers:
                - x-api-key
              ReauthorizeEvery: 0

  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: {{ cookiecutter.camelcase_project_name }}CachePolicy
        DefaultTTL: 86400
        MaxTTL: 86400
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Origin
              - x-user-token
          QueryStringsConfig:
            QueryStringBehavior: all
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref AlternateDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: ServerlessRestApi
          CachePolicyId: !Ref CachePolicy
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - POST
            - PUT
            - DELETE
            - PATCH # Added all methods
          CachedMethods:
            - GET
            - HEAD # Cache GET and HEAD methods only
        Origins:
          - Id: ServerlessRestApi
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: /Prod
            CustomOriginConfig:
              OriginProtocolPolicy: https-only

  # TODO: Create Route53 HostedZone Record dynamically
  # Route53RecordSet:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: Z118YDPZSVV5TP
  #     Name: test-foobar.booky.ph
  #     ResourceRecords:
  #     - d27tg0s07b9g55.cloudfront.net
  #     TTL: 300
  #     Type: CNAME

  AllEndpoints:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/AllEndpoints
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /endpoints
            Method: GET

  HelloWorldV1:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/HelloWorldV1
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /v1/hello-world
            Method: GET
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM_1: VALUE

  CachedWorldV1:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/CachedWorldV1
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /v1/cached-world
            Method: GET
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM_1: ANOTHER_VALUE

  InvalidateCachedWorldV1:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: handlers/InvalidateCachedWorldV1
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /v1/invalidate-cached-world
            Method: POST
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          DISTRIBUTION_ID: !Ref DistributionId # TODO: Find a way to get !Ref CloudFrontDistribution (CloudFrontDistributionID) without circular dependency
      Policies:
        - CloudFrontFullAccess
    # DependsOn: CloudFrontDistribution # TODO: This could help on CloudFrontDistributionID

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution

  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
